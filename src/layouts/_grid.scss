$eve-grid-cells-count: 12 !default;
$eve-grid-gaps: (
    tiny: $eve-spacing-tiny,
    small: $eve-spacing-small,
    normal: $eve-spacing-normal,
    large: $eve-spacing-large,
) !default;
$eve-grid-aligns: (
    start: flex-start,
    end: flex-end,
    center: center,
) !default;
$eve-grid-justifies: (
    start: flex-start,
    end: flex-end,
    center: center,
    between: space-between,
    around: space-around
) !default;

.eve-grid {
    display: flex;
    flex-wrap: nowrap;

    .eve-cell {
        flex: 1;
        max-width: 100%;
    }

    @each $eve-grid-gap in map-keys($eve-grid-gaps) {
        $gap: map-get($eve-grid-gaps, $eve-grid-gap) / 2;

        &.eve-grid-gap-#{$eve-grid-gap} {
            margin: -$gap;

            .eve-cell {
                padding: $gap;
            }

            @for $i from 1 through $eve-grid-cells-count {
                .eve-cell-#{$i} {
                    padding: $gap;
                }
            }
        }
    }

    @each $eve-grid-align in map-keys($eve-grid-aligns) {
        &.eve-grid-align-#{$eve-grid-align} {
            align-items: map-get($eve-grid-aligns, $eve-grid-align);
        }
    }

    @each $eve-grid-justify in map-keys($eve-grid-justifies) {
        &.eve-grid-justify-#{$eve-grid-justify} {
            justify-content: map-get($eve-grid-justifies, $eve-grid-justify);
        }
    }

    @for $i from 1 through $eve-grid-cells-count {
        .eve-cell-#{$i} {
            $width: percentage($i / $eve-grid-cells-count);

            flex: 1 $width;
            max-width: $width;
        }
    }

    @media (max-width: 480px) {
        & {
            flex-direction: column;

            .eve-cell {
                flex: 1 100%;
            }

            @for $i from 1 through $eve-grid-cells-count {
                .eve-cell-#{$i} {
                    flex: 1 100%;
                    max-width: 100%;
                }
            }
        }
    }
}
